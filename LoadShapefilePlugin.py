# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LoadShapefilePlugin
                                 A QGIS plugin
 to load shapefile and visualize
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-05-11
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Apurwa Chaurasia
        email                : apurwa2776@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify *
 *   it under the terms of the GNU General Public License as published by *
 *   the Free Software Foundation; either version 2 of the License, or    *
 *   (at your option) any later version.                                  *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox
from qgis.core import QgsVectorLayer, QgsProject

from .resources import *  # Load compiled resource file
from .LoadShapefilePlugin_dialog import LoadShapefilePluginDialog
import os.path


class LoadShapefilePlugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'LoadShapefilePlugin_{}.qm'.format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.actions = []
        self.menu = self.tr(u'&LoadShapefilePlugin')
        self.first_start = None

    def tr(self, message):
        """Get the translation for a string using Qt translation API."""
        return QCoreApplication.translate('LoadShapefilePlugin', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar and menu."""
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)
        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/LoadShapefilePlugin/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Load Shapefile'),
            callback=self.run,
            parent=self.iface.mainWindow()
        )
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u'&LoadShapefilePlugin'), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work."""
        # Show file dialog to select shapefile
        file_path, _ = QFileDialog.getOpenFileName(
            self.iface.mainWindow(),
            "Select Shapefile",
            "",
            "Shapefiles (*.shp)"
        )

        if file_path:
            layer = QgsVectorLayer(file_path, os.path.basename(file_path), "ogr")

            if not layer.isValid():
                QMessageBox.critical(self.iface.mainWindow(), "Error", "Failed to load shapefile.")
                return

            QgsProject.instance().addMapLayer(layer)
            QMessageBox.information(self.iface.mainWindow(), "Success", "Shapefile loaded successfully!")

        # Load dialog window (if needed)
        if self.first_start:
            self.first_start = False
            self.dlg = LoadShapefilePluginDialog()

        self.dlg.show()
        self.dlg.exec_()
